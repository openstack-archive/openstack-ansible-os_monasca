[DEFAULT]
# logging, make sure that the user under whom the server runs has permission
# to write to the directory.
log_file = monasca-events-api.log
log_dir = {{ monasca_log_directory }}
debug={{ debug }}

# Identifies the region that the Monasca API is running in.
region = {{ keystone_service_region }}

# Dispatchers to be loaded to serve restful APIs
[dispatcher]
versions = monasca_events_api.v2.versions:Versions
stream_definitions = monasca_events_api.v2.stream_definitions:StreamDefinitions
events = monasca_events_api.v2.events:Events
transforms  = monasca_events_api.v2.transforms:Transforms

[security]
# The roles that are allowed full access to the API.
default_authorized_roles = user, domainuser, domainadmin, monasca-user

# The roles that are allowed to only POST metrics to the API. This role would be used by the Monasca Agent.
agent_authorized_roles = monasca-agent

# The roles that are allowed to access the API on behalf of another tenant.
# For example, a service can POST metrics to another tenant if they are a member of the "delegate" role.
delegate_authorized_roles = admin

[messaging]
# The message queue driver to use
driver = monasca_events_api.common.messaging.kafka_publisher:KafkaPublisher

[repositories]
# The driver to use for the stream definitions repository
streams = monasca_events_api.common.repositories.mysql.streams_repository:StreamsRepository

# The driver to use for the events repository
events = monasca_events_api.common.repositories.mysql.events_repository:EventsRepository

# The driver to use for the transforms repository
transforms = monasca_events_api.common.repositories.mysql.transforms_repository:TransformsRepository

[dispatcher]
driver = v2_reference

[kafka]
# The endpoint to the kafka server
uri = {{ kafka_hosts }}:{{ kafka_port }}

# The topic that events will be published too
events_topic = transformed-events

# consumer group name
group = api

# how many times to try when error occurs
max_retry = 1

# wait time between tries when kafka goes down
wait_time = 1

# use synchronous or asynchronous connection to kafka
async = False

# send messages in bulk or send messages one by one.
compact = False

# How many partitions this connection should listen messages on, this
# parameter is for reading from kafka. If listens on multiple partitions,
# For example, if the client should listen on partitions 1 and 3, then the
# configuration should look like the following:
#   partitions = 1
#   partitions = 3
# default to listen on partition 0.
partitions = 0

[mysql]
database_name = {{ monasca_galera_database }}
hostname = {{ monasca_galera_address }}
username = {{ monasca_galera_user }}
password = {{ monasca_galera_password }}

[keystone_authtoken]
insecure = {{ keystone_service_internaluri_insecure | bool }}
auth_plugin = {{ monasca_keystone_auth_plugin }}
auth_url = {{ keystone_service_adminuri }}
auth_uri = {{ keystone_service_internaluri }}
project_domain_id = {{ monasca_service_project_domain_id }}
user_domain_id = {{ monasca_service_user_domain_id }}
project_name = {{ monasca_service_project_name }}
username = {{ monasca_service_user_name }}
password = {{ monasca_service_password }}
region_name = {{ keystone_service_region }}
