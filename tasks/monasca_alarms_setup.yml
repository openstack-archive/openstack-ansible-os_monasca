---
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

- name: Wait for monasca-api to come up
  uri:
    url: "{{ monasca_service_internalurl }}"
    status_code: 401
  register: result
  until: result|success
  retries: 5
  delay: 2

- name: Setup monasca alarms
  delegate_to: "{{ monasca_service_setup_host }}"
  vars:
    # If not on localhost, do not run on target's python, but on ansible's venv.
    ansible_python_interpreter: >-
      {{ (monasca_service_setup_host == 'localhost') | ternary(ansible_playbook_python, monasca_bin ~ '/python') }}
  block:
    - debug:
        var: ansible_python_interpreter
    - name: Ensure target node has the appropriate libs installed
      pip:
        name: python-monascaclient
        state: "{{ monasca_pip_package_state }}"
        virtualenv: "{{ monasca_bin | dirname }}"
        virtualenv_site_packages: "no"
        extra_args: >-
          {{ monasca_developer_mode | ternary(pip_install_developer_constraints | default('--constraint /opt/developer-pip-constraints.txt'), '') }}
          {{ (pip_install_upper_constraints is defined) | ternary('--constraint ' + pip_install_upper_constraints | default(''),'') }}
          {{ pip_install_options | default('') }}
      register: install_packages
      until: install_packages is success
      retries: 5
      delay: 2
      when: monasca_get_venv | failed or monasca_get_venv | skipped
      notify:
        - Restart monasca services

    - name: Setup default notification method
      monasca_notification_method:
        name: "{{ monasca_notification_name }}"
        type: "{{ monasca_notification_type }}"
        address: "{{ monasca_notification_address }}"
        keystone_auth_url: "{{ keystone_service_adminurl }}"
        keystone_username: "{{ keystone_admin_user_name }}"
        keystone_password: "{{ keystone_auth_admin_password }}"
        keystone_project_name: "{{ keystone_admin_tenant_name }}"
        monasca_api_url: "{{ monasca_service_internalurl }}"
      register: default_notification
      #TODO(evrardjp): remove this
      #no_log: True
      # TODO(evrardjp): Add conditional for deploy from
      # packages to set the python_interpreter to the
      # system's one.
      # Make sure the module doesn't load the code on the
      # target node, but inside target node's venv when
      # deploying from source
    
    - name: Create default alarm definitions
      monasca_alarm_definition:
        name: "{{ item.name }}"
        description: "{{ item.description | default('') }}"
        expression: "{{ item.expression }}"
        match_by: "{{ item.match_by | default(['hostname']) }}"
        severity: "{{ item.severity | default('LOW') }}"
        alarm_actions:
          - "{{ default_notification.notification_method_id }}"
        ok_actions:
          - "{{ default_notification.notification_method_id }}"
        undetermined_actions:
          - "{{ default_notification.notification_method_id }}"
        keystone_auth_url: "{{ keystone_service_adminurl }}"
        keystone_username: "{{ keystone_admin_user_name }}"
        keystone_password: "{{ keystone_auth_admin_password }}"
        keystone_project_name: "{{ keystone_admin_tenant_name }}"
        monasca_api_url: "{{ monasca_service_internalurl }}"
      with_items: "{{ monasca_default_alarms }}"
      #TODO(evrardjp): remove this
      #no_log: True
      # TODO(evrardjp): Add conditional for deploy from
      # packages to set the python_interpreter to the
      # system's one.
      # Make sure the module doesn't load the code on the
      # target node, but inside target node's venv when
      # deploying from source
